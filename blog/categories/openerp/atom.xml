<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: OpenERP | 步科的博客]]></title>
  <link href="http://buke.github.com/blog/categories/openerp/atom.xml" rel="self"/>
  <link href="http://buke.github.com/"/>
  <updated>2013-02-21T17:58:16+08:00</updated>
  <id>http://buke.github.com/</id>
  <author>
    <name><![CDATA[wangbuke@gmail.com]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OpenERP 负载平衡]]></title>
    <link href="http://buke.github.com/blog/2013/01/21/openerp-load-balance/"/>
    <updated>2013-01-21T15:11:00+08:00</updated>
    <id>http://buke.github.com/blog/2013/01/21/openerp-load-balance</id>
    <content type="html"><![CDATA[<p> OpenERP 7.0 带来了许多新特性，架构上也有许多改进。其中可配置 worker 参数，可使 OpenERP 运行在多进程模式，突破GIL的限制，有效利用了现代多核CPU的性能。但默认情况下，OpenERP 只能运行于一台服务器，对于提供SAAS服务或并发很大的情况下，单台服务器的性能是有限的。本文介绍实现 OpenERP 负载平衡的方法和原理。</p>

<p>一、架构</p>

<pre><code>┌──────────────────────────────────────────────┐
│                   Nginx                      │
└──────────────────────────────────────────────┘
        /              |                \
┌────────────┐   ┌────────────┐    ┌────────────┐
│ OE Server  │   │ OE Server  │    │ OE Server  │
└────────────┘   └────────────┘    └────────────┘
         \             |                /
┌───────────────────────────────────────────────┐
│                Redis Server                   │
└───────────────────────────────────────────────┘
</code></pre>

<p>注：实现负载平衡的关键点在于 cache 和 session 共享。</p>

<p>二、Web 服务器配置</p>

<p>WEB 服务器选择 Nginx + upstream 配置，可参考 “使用Nginx Upstream 部署 OpenERP ” http://my.oschina.net/wangbuke/blog/67450 。</p>

<p>默认情况下，nginx 采用轮询的方式，将请求分发到多个 OE Server 里。建议改为 ip_hash 方式，如：</p>

<pre><code>upstream bakend {
     ip_hash;
     server 192.168.0.11:8069;
     server 192.168.0.12:8069;
}
</code></pre>

<p>三、OpenERP 的 Session 和 Cache 处理</p>

<p>3.1 OpenERP Web Session 处理</p>

<p>OpenERP 中的Session 处理默认用FilesystemSessionStore，使用文件系统存储用户 session  。如 openerp/addons/web/http.py</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Root</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">session_store</span> <span class="o">=</span> <span class="n">werkzeug</span><span class="o">.</span><span class="n">contrib</span><span class="o">.</span><span class="n">sessions</span><span class="o">.</span><span class="n">FilesystemSessionStore</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">session_lock</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Lock</span><span class="p">()</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>那么我们只要将OpenERP 中的SessionStore，改为 RedisSessionStore，RedisSessionStore 可参考https://gist.github.com/1451947 。</p>

<p>修改方法，可以直接修改 http.py 文件。
或是和我一样，重写一个库，重载 session_context 方法，这样可以不修改OpenERP的源文件，方便以后升级。</p>

<p>3.2 OpenERP LRU Cache 处理</p>

<p>openerp/tools/cache.py 中 ormcache 和 ormcache_multi 是 OpenERP 中非常重要的缓存类。OpenERP ORM 大部分的方法调用都会经过 @tools.ormcache 或 @ormcache_multi 修饰。经过修饰后，结果会被缓存，这个缓存是存放于内存中。 这个就是OE在加载一次数据后，第二次会明显快很多的原因。还有，通过web 界面翻译OE术语不能实时生效，也是因为缓存没有更新。</p>

<p>可以修改ormcache 和 ormcache_multi 类，以使用 redis 缓存。关键代码如下：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">lookup</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">self2</span><span class="p">,</span> <span class="n">cr</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">):</span>
</span><span class='line'>    <span class="n">key</span> <span class="o">=</span> <span class="n">args</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">skiparg</span><span class="o">-</span><span class="mi">2</span><span class="p">:]</span>
</span><span class='line'>    <span class="n">key</span> <span class="o">=</span> <span class="s">&#39;</span><span class="si">%s</span><span class="s">:</span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">method</span><span class="o">.</span><span class="n">__name__</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
</span><span class='line'>    <span class="c">#key = md5(key).hexdigest()</span>
</span><span class='line'>    <span class="n">hash_name</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">db_key_template</span> <span class="o">%</span> <span class="n">cr</span><span class="o">.</span><span class="n">dbname</span>
</span><span class='line'>    <span class="n">value</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">redis</span><span class="o">.</span><span class="n">hget</span><span class="p">(</span><span class="n">hash_name</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">value</span><span class="p">:</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">stat_hit</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">loads</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">stat_miss</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="n">value</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">method</span><span class="p">(</span><span class="n">self2</span><span class="p">,</span> <span class="n">cr</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">redis</span><span class="o">.</span><span class="n">hset</span><span class="p">(</span><span class="n">hash_name</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">dumps</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">HIGHEST_PROTOCOL</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">redis</span><span class="o">.</span><span class="n">expire</span><span class="p">(</span><span class="n">hash_name</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">timeout</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">value</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>缓存的值使用 cPickle 序列化后，将每个键值对存放于 redis 的 哈希表中。</p>

<p>3.3 auth_openid 模块</p>

<p>auth_openid模块也使用文件系统存储用户登录凭证。如：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">OpenIDController</span><span class="p">(</span><span class="n">openerp</span><span class="o">.</span><span class="n">addons</span><span class="o">.</span><span class="n">web</span><span class="o">.</span><span class="n">http</span><span class="o">.</span><span class="n">Controller</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">_store</span> <span class="o">=</span> <span class="n">filestore</span><span class="o">.</span><span class="n">FileOpenIDStore</span><span class="p">(</span><span class="n">_storedir</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
如果您启用了这个模块，那么这里也需要修改为存储在redis中。如果没有启用此模块，则无需理会。</p>

<p>相关实现可参考，https://github.com/bbangert/openid-redis/blob/master/openidredis/<strong>init</strong>.py</p>

<p>四、OpenERP Cron 处理</p>

<p>默认情况下，每个OpenERP Server 实例都会运行一个 cron 进程任务。这里建议只允许一个实例运行CRON。把OpenERP 7.0 的配置参数 max_cron_threads 设置为0 ，即可禁止cron。相关代码如下：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">process_spawn</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">workers_http</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="bp">self</span><span class="o">.</span><span class="n">population</span><span class="p">:</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">worker_spawn</span><span class="p">(</span><span class="n">WorkerHTTP</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">workers_http</span><span class="p">)</span>
</span><span class='line'>    <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">workers_cron</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">config</span><span class="p">[</span><span class="s">&#39;max_cron_threads&#39;</span><span class="p">]:</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">worker_spawn</span><span class="p">(</span><span class="n">WorkerCron</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">workers_cron</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>五、OpenERP Module RegistryManager 处理</p>

<p>OpenERP Module Registry 主要负责管理OE的对象。一般是安装或更新的模块时候，会根据定义来更新数据库。 在OE多进程模式下，OE会自动管理 Module Registry ，相关的更新信息会存放在数据库里。RegistryManager  会检测是否有更新，如有更新将会自动清除缓存并重新载入。相关代码如下：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@classmethod</span>
</span><span class='line'><span class="k">def</span> <span class="nf">setup_multi_process_signaling</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">cr</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">openerp</span><span class="o">.</span><span class="n">multi_process</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@classmethod</span>
</span><span class='line'><span class="k">def</span> <span class="nf">check_registry_signaling</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">db_name</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">openerp</span><span class="o">.</span><span class="n">multi_process</span> <span class="ow">and</span> <span class="n">db_name</span> <span class="ow">in</span> <span class="n">cls</span><span class="o">.</span><span class="n">registries</span><span class="p">:</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这里，实际上无需做改动,上面只是说明情况。只需让OE运行在多进程模式即可（也就是配置 worker 参数）。</p>

<p>六、完成！</p>

<p>经过以上几个步骤，可以让OpenERP 运行于多台服务器，通过Redis 分布式缓存处理相关的 Cache 和 Session，从而实现 OpenERP 负载平衡。</p>

<p>注：
1、本文仅讨论 OpenERP 负载平衡部署方式，并不涉及 Postgresql 和 Redis 的负载平衡，相应的方法请自行搜索。
2、鉴于OpenERP SA 官方已不再维护 GTK 客户端，并没有对GTK客户端的情况进行完整测试。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenERP 自动编码去BOM（可用excel编辑）]]></title>
    <link href="http://buke.github.com/blog/2012/09/05/openerp-web-import-chardet/"/>
    <updated>2012-09-05T15:00:00+08:00</updated>
    <id>http://buke.github.com/blog/2012/09/05/openerp-web-import-chardet</id>
    <content type="html"><![CDATA[<p>openerp-web-import-chardet</p>

<p>作者：wangbuke@gmail.com</p>

<p>源码托管地址： https://github.com/buke/openerp-web-import-chardet</p>

<p>OE apps 下载地址： http://apps.openerp.com/addon/8098</p>

<h1>功能：</h1>

<p>自动检测OpenERP 导入的CSV文件编码 自动移除UTF8文件的BOM。安装完之后，就可以直接用EXCEL WPS等编辑好的CSV文件，导入到OpenERP中。</p>

<h1>支持编码：</h1>

<ul>
<li>ASCII, UTF-8</li>
<li>Big5, GBK, GB2312, HZ-GB, HZ-GB-2312 (简体/繁体中文)</li>
<li>EUC-JP, SHIFT_JIS, ISO-2022-JP (日文)</li>
<li>EUC-KR, ISO-2022-KR (韩文)</li>
<li>KOI8-R, MacCyrillic, IBM855, IBM866, ISO-8859-5, windows-1251 (斯拉夫文)</li>
<li>ISO-8859-2, windows-1250 (匈牙利文)</li>
<li>ISO-8859-5, windows-1251 (保加利亚文)</li>
<li>windows-1252 (英文)</li>
<li>ISO-8859-7, windows-1253 (希腊文)</li>
<li>ISO-8859-8, windows-1255 (希伯来文)</li>
<li>TIS-620 (泰文)</li>
</ul>


<h1>依赖模块:</h1>

<p>python chardet (本模块已内含chardet-1.1。如果系统安装了新版本，则使用您安装的新版本.)</p>

<p><img src="/images/my/oe-chardet.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenERP PyChart 中文报表模块（支持CJK语言）]]></title>
    <link href="http://buke.github.com/blog/2012/08/19/openerp-pychart-unicode-report/"/>
    <updated>2012-08-19T15:44:00+08:00</updated>
    <id>http://buke.github.com/blog/2012/08/19/openerp-pychart-unicode-report</id>
    <content type="html"><![CDATA[<p>OpenERP PyChart Unicode Report (Support CJK Font)</p>

<p>作者：wangbuke@gmail.com</p>

<p>源码托管地址：https://github.com/buke/openerp-pychart-unicode-report</p>

<p>OpenERP 官方APP下载地址： http://apps.openerp.com/addon/8009</p>

<p>支持pychart中文报表，如“库存预测”、“工作中心负载” 等报表。</p>

<h1>模块原理</h1>

<p>让pychart 生成svg 文件，然后用cairosvg 模块生成PDF报表。</p>

<h1>依赖模块</h1>

<p>python-cairo python-cairosvg</p>

<p>Debian/Ubuntu安装方法： $ su apt-get install python-cairo python-cairosvg</p>

<h1>安装与设置</h1>

<h2>1、安装字体</h2>

<p>复制您所用的字体文件，如simsun.ttc 到系统目录下。</p>

<p>debian/ubuntu: $ sudo cp simsun.ttc /usr/share/fonts</p>

<p>windows :  C:> copy simsun.ttc  c:/windows/fonts</p>

<h3>2、配置pychart 报表字体 默认使用宋体</h3>

<p>修改openerp 配置文件 openerp-server.conf , 添加以下参数：</p>

<p>pychart_ttfont_name = Simsun</p>

<p>注：默认是宋体，如使用默认值则无需修改 conf 文件</p>

<p>祝你好运 ~</p>

<p><img src="/images/my/oe-pychart-report.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开源模块 Openerp Web PDF Report Preview & Print 简介]]></title>
    <link href="http://buke.github.com/blog/2012/08/02/openerp-web-pdf-report-preview-and-print/"/>
    <updated>2012-08-02T15:32:00+08:00</updated>
    <id>http://buke.github.com/blog/2012/08/02/openerp-web-pdf-report-preview-and-print</id>
    <content type="html"><![CDATA[<p>Openerp Web PDF Report Preview &amp; Print</p>

<p>下载地址： https://github.com/buke/openerp-web-pdf-preview-print</p>

<p>openerp 官方app下载 ：  http://apps.openerp.com/addon/7941</p>

<p>简介:</p>

<p>将OpenERP 的PDF报表打印下载功能，改为直接在浏览器中预览打印。</p>

<p>For IE， 需要安装 Adobe Reader。</p>

<p>For Firefox ,需要安装 Adobe Reader。</p>

<p>For Chrome, 神马都不用安装。</p>

<p>以上在windows 上测试通过。如果浏览器阻止了弹出窗口，请点允许弹出窗口。</p>

<p>系统要求：</p>

<p>OpenERP 6.1</p>

<p><img src="/images/my/oe-pdf-print.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Taobao OpenERP Connector 简要说明]]></title>
    <link href="http://buke.github.com/blog/2012/07/18/taobao-openerp-connector/"/>
    <updated>2012-07-18T16:29:00+08:00</updated>
    <id>http://buke.github.com/blog/2012/07/18/taobao-openerp-connector</id>
    <content type="html"><![CDATA[<p>Taobao OpenERP Connector</p>

<p>项目托管地址：<a href="https://github.com/buke/openerp-taobao">https://github.com/buke/openerp-taobao</a></p>

<p>作者： wangbuke@gmail.com</p>

<h1>功能：</h1>

<ol>
<li>接受淘宝主动通知，自动添加、确认订单、发货等。</li>
<li>同步淘宝订单</li>
<li>导入淘宝产品, 同步库存</li>
<li>导入淘宝用户</li>
<li>自动评价，中差评预警</li>
<li>跟踪淘宝订单物流信息, 签收提醒</li>
<li>.... 等等等 (懒的写了，自己发现吧)</li>
</ol>


<h1>系统要求：</h1>

<ul>
<li>OpenERP 6.1</li>
<li>beanstalkd</li>
<li>pycurl</li>
</ul>


<h1>安装说明：</h1>

<h2>1. 安装beanstalkd</h2>

<h3>1.1 linux 系统</h3>

<p>debian/ubuntu: # apt-get install beanstalkd</p>

<p>redhat/centos: # yum install beanstalkd</p>

<p>安装完成之后，开启beanstalkd的持久化选项：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>vi /etc/default/beanstalkd&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;h2>Defaults for the beanstalkd init script, /etc/init.d/beanstalkd on&lt;/h2>
</span><span class='line'>
</span><span class='line'>&lt;h2>Debian systems. Append ``-b /var/lib/beanstalkd'' for persistent&lt;/h2>
</span><span class='line'>
</span><span class='line'>&lt;h2>storage.&lt;/h2>
</span><span class='line'>
</span><span class='line'>&lt;p>BEANSTALKD_LISTEN_ADDR=0.0.0.0
</span><span class='line'>BEANSTALKD_LISTEN_PORT=11300&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>DAEMON_OPTS="-l $BEANSTALKD_LISTEN_ADDR -p $BEANSTALKD_LISTEN_PORT"&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>DAEMON_OPTS="-l $BEANSTALKD_LISTEN_ADDR -p $BEANSTALKD_LISTEN_PORT -b /var/lib/beanstalkd"&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h2>Uncomment to enable startup during boot.&lt;/h2>
</span><span class='line'>
</span><span class='line'>&lt;p>START=yes</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>1.2 windows 系统</h3>

<p>beanstalkd 原生不能在windows 下运行，当然也有大牛用cgywin 编译了一个。请参考 http://software1987.de/2011/03/beanstalkd-unter-windows-mit-cygwin/  。编译后的 beanstalkd 下载地址是 http://software1987.de/wp-content/uploads/2011/03/beanstalkd-1.4.6-cygwin.zip</p>

<p>下载解压后，打开 cmd.exe 运行</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>C:\beanstalkd\bin>beanstalkd.exe -l 127.0.0.1 -p 11300 -b C:\beanstalkd</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>注意上面的目录路径，根据您的实际情况修改。 -b 后面是目录，用于存放beanstalkd 持久化的文件。 上面是直接运行，当然您也可以创建快捷方式，或者用runasservice 工具封装成windows 的服务。</p>

<h2>2. 安装pycurl</h2>

<h3>2.1 linux 系统</h3>

<p>debian/ubuntu: # apt-get install python-pycurl</p>

<p>redhat/centos: # yum install python-pycurl</p>

<h3>2.2 windows 系统</h3>

<h4>2.2.1 OpenERP - 源码安装</h4>

<h5>2.2.1.1 安装 python （如已经安装则跳过）</h5>

<p>到 http://python.org/ 下载安装，不解释</p>

<h5>2.2.1.2 安装 pycurl（如已经安装则跳过）</h5>

<p>到 http://www.lfd.uci.edu/~gohlke/pythonlibs/#pycurl 下载对应版本的 pycurl 安装</p>

<h4>2.2.2 OpenERP - all in one</h4>

<p>all in one 的版本 在安装完以上步骤之外，还需要把 C:\Python26\Lib\site-packages 目录下的 curl 目录 和 pycurl.pyd 文件 复制到 C:\Program Files\OpenERP 6.1-20120717-233333\Server\server 目录中。（注意路径！，根据实际情况修改）不然下面的安装会提示找不到pycurl。</p>

<p>注意：我现在的all in one （OpenERP 6.1-20120717-233333\） python版本 2.6，所以使用all in one 版本的同学注意了，上面2步都要下载安装for python 2.6 版本的。 （通过看C:\Program Files\OpenERP 6.1-20120717-233333\Server\server\python26.dll这个文件的后缀可以知道python 版本）</p>

<h2>3. 安装 Taobao OpenERP Connector 模块</h2>

<p>这里和OE安装模块方法一样。首先到https://github.com/buke/openerp-taobao 下载，然后有2种方法：一种是把taobao 文件夹放到OpenERP 的 addon 目录下，第二种是把taobao 文件夹压缩为zip 文件，通过OE后台上传模块。</p>

<h2>4. OpenERP conf 文件配置参数</h2>

<p>Taobao OpenERP Connector 模块有几个默认配置参数如下：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>beanstalkd_interface = localhost
</span><span class='line'>beanstalkd_port = 11300
</span><span class='line'>taobao_stream_service = True
</span><span class='line'>taobao_stream_thread_limit = 1
</span><span class='line'>taobao_worker_thread_limit = 4</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p> 上面是默认值，如果您不需要修改则不用放入OpenERP 启动的 conf中。反之，如果你需要修改 ，则将上面几个参数写在conf 文件中。</p>

<h2>5. 关于淘宝 api 的几个问题</h2>

<p>首先登陆 open.taobao.com 创建一个 C/S 架构 自用型应用，然后开通主动通知业务。</p>

<p>App Key : 自己找，不解释</p>

<p>App Secret: 自己找，不解释</p>

<p>App SessionKey: 获取方法</p>

<ol>
<li>先访问 http://my.open.taobao.com/auth/authorize.htm?appkey={appkey}获得授权码</li>
<li>再访问 http://container.open.taobao.com/container?authcode={授权码},会得到类似如下的字符串top_appkey=1142&amp;top_parameters=xxx&amp;top_session=xxx&amp;top_sign=xxx,字符串里面的top_session值即为SessionKey</li>
</ol>


<p>根据淘宝文档说明，C/S应用的 SessionKey 有效期为一年，大家到时记得更新。</p>

<p>PS:</p>

<p>配置淘宝商店的时候出现报错的，请检查你们的淘宝应用权限 。必须是C/S架构的商家后台系统。淘宝规定请看 http://dev.open.taobao.com/bbs/read.php?tid=24315  自2012年7月12日起，“商家后台系统标签”的申请只允许商城店铺和集市三皇冠以上商家申请。</p>

<p>欢迎大家参与此项目，或者到https://github.com/buke/openerp-taobao 提需求、BUG等，也可以直接给我来信。谢谢~</p>
]]></content>
  </entry>
  
</feed>
